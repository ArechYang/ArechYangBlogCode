{"total":2,"pageSize":10,"pageCount":1,"data":[{"title":"git command图文说明","slug":"git","date":"2019-01-30T02:43:34.000Z","updated":"2019-01-30T07:23:33.634Z","comments":true,"path":"api/articles/git.json","excerpt":"","keywords":null,"cover":"images/git1.png","content":"<h3 id=\"核心git命令介绍-amp-记录\"><a href=\"#核心git命令介绍-amp-记录\" class=\"headerlink\" title=\"核心git命令介绍&amp;记录\"></a>核心git命令介绍&amp;记录</h3><ul>\n<li><p><code>git commit</code></p>\n<p><img src=\"images/git1.png\" alt=\"\"></p>\n</li>\n<li><p><code>git checkout -b bugfix ； git commit</code> 创建并切换到bugfix分支，并在bugfix上提交；</p>\n<p><img src=\"images/git2.png\" alt=\"\"></p>\n</li>\n<li><p><code>git checkout -b bugfix</code>建新的分支，*表示当前处于该分支</p>\n<p><img src=\"images/git3.png\" alt=\"\"></p>\n<p><img src=\"images/git4.png\" alt=\"\"></p>\n</li>\n<li><p><code>git merge bugfix</code> 把bugfix分支合并到当前*所在分支；</p>\n<p><img src=\"images/git5.png\" alt=\"\"></p>\n<p>如果存在包含需要合并内容的最新节点，则直接移动分支节点位置；</p>\n<p><img src=\"images/git6.png\" alt=\"\"></p>\n</li>\n<li><p><code>git rebase</code>  取出一系列提交记录，“复制它们”，然后在另一个地方逐个放下去；</p>\n<p><img src=\"images/git7.png\" alt=\"\"></p>\n</li>\n<li><p><code>HEAD</code>:</p>\n<ol>\n<li>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</li>\n<li>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变</li>\n<li>HEAD 的指向开始的。HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</li>\n</ol>\n<p><img src=\"images/git8.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git checkout 版本号</code> 指定HEAD到当前版本;</p>\n<p><img src=\"images/git9.png\" alt=\"\"></p>\n</li>\n<li><p>相对引用‘^’:</p>\n<p><img src=\"images/git10.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git checkout bugFix^</code> 操作位置跳转到bugfix分支上一个父节点；</p>\n<p><img src=\"images/git11.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git checkout HEAD~4</code> 从当前位置HEAD上移4个；</p>\n<p><img src=\"images/git12.png\" alt=\"\"></p>\n<p><img src=\"images/git13.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git reset</code><br>本地将代码回滚一次，但是修改项只在本地，未在缓存区；对远程不影响。</p>\n<p><img src=\"images/git14.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git revert</code></p>\n<p><img src=\"images/git15.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git cherry-pick</code> 获取其他分支版本号，直接把对应修改合并到当前分支。</p>\n<p><img src=\"images/git16.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git clone</code></p>\n<p><img src=\"images/git17.png\" alt=\"\"></p>\n</li>\n<li><p>远程分支命名规范：</p>\n<p><img src=\"images/git18.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git fetch</code> 下载所有仓库的数据；</p>\n<p><img src=\"images/git19.png\" alt=\"\"></p>\n<p><img src=\"images/git20.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git pull</code></p>\n<p><img src=\"images/git21.png\" alt=\"\"></p>\n</li>\n<li><p><code>Git push</code></p>\n<p><img src=\"images/git22.png\" alt=\"\"></p>\n<p><img src=\"images/git23.png\" alt=\"\"></p>\n<p>实践环境链接如下：<a href=\"https://learngitbranching.js.org/?NODEMO\" target=\"_blank\" rel=\"noopener\">我要实践</a></p>\n</li>\n</ul>\n","text":"核心git命令介绍&amp;记录git commit [Figure] 实践环境链接如下：我要实践","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}]},{"title":"Docker打包自己httpd镜像","slug":"docker","date":"2019-01-28T02:43:34.000Z","updated":"2019-01-30T01:45:32.311Z","comments":true,"path":"api/articles/docker.json","excerpt":"","keywords":null,"cover":"images/docker_img.png","content":"<h3 id=\"Docker打包httpd镜像\"><a href=\"#Docker打包httpd镜像\" class=\"headerlink\" title=\"Docker打包httpd镜像\"></a>Docker打包httpd镜像</h3><ul>\n<li>(1)docker pull centos 下载centos镜像；</li>\n<li>(2)docker create centos 使用centos镜像创建一个容器；</li>\n<li><p>(3)docker run -i -t –name=docker_run centos bash 运行创建的容器并指定容器名；</p>\n<p>  -i : 为容器打开标准输入;</p>\n<p>  -t : 创建一个新的命令行;</p>\n<p>  -name : 指定容器名称;</p>\n<p>  centos : 指定启动容器使用的镜像;</p>\n<p>  /bin/bash: 告诉docker要在容器内执行此命令；</p>\n</li>\n<li>(4)docker commit 4f2a52ce9385 bugsos 将4f2a52ce9385 容器打包为bugsos镜像；</li>\n<li>(5)docker save 56bd3610a51d &gt; ./bugsos.tar 导出容器保存为镜像；</li>\n<li><p>(6)Docker tag可以给镜像命名；（docker tag 5182e96772bf httpd:1.0）</p>\n<p><img src=\"images/docker_img.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"遇到的问题-amp-解决方案\"><a href=\"#遇到的问题-amp-解决方案\" class=\"headerlink\" title=\"遇到的问题&amp;解决方案\"></a>遇到的问题&amp;解决方案</h4><ul>\n<li><p>(1)docker build -t centos:httpd .<br>. 代表Dockerfile文件, 生成的镜像名称为centos:httpd</p>\n</li>\n<li><p>启动httpd容器命令：<br>docker run -it -d –privileged -p 80:80 –name=http_max httpd:1.0 /sbin/init</p>\n</li>\n</ul>\n<ul>\n<li>问题：解决systemctl启动服务报错问题；</li>\n<li>措施：<br>docker run –privileged -d -p 10080:80 centos /sbin/init<br>–privileged : 该参数使root用户拥有root权限；</li>\n</ul>\n<h4 id=\"分享docker很系统的知识链接：\"><a href=\"#分享docker很系统的知识链接：\" class=\"headerlink\" title=\"分享docker很系统的知识链接：\"></a>分享docker很系统的知识链接：</h4><blockquote>\n<p>   <a href=\"https://yeasy.gitbooks.io/docker_practice/introduction/what.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/introduction/what.html</a></p>\n</blockquote>\n","text":"Docker打包httpd镜像(1)docker pull centos 下载centos镜像；(2)docker create centos 使用centos镜像创建一个容器；(3)docker run -i -t –name=docker_run centos bash 运行","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}]}]}